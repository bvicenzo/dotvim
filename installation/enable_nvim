#!/usr/bin/env ruby
# frozen_string_literal: true

puts 'Enable NVim'

config_dir_path = File.join(Dir.home, '.config/')

if Dir.exist?(config_dir_path)
  puts "Skip creating config dir #{config_dir_path}"
else
  puts "Creating config dir at #{config_dir_path}"
  Dir.mkdir(config_dir_path)
end

nvim_dir_path = File.join(config_dir_path, 'nvim/')

if Dir.exist?(nvim_dir_path)
  puts "Skip creating nvim dir #{nvim_dir_path}"
else
  puts "Creating nvim dir at #{nvim_dir_path}"
  Dir.mkdir(nvim_dir_path)
end

nvim_init_file_original_path = File.join(Dir.home, '.vim/nvim/init.vim')
nvim_init_file_path = File.join(nvim_dir_path, 'init.vim')

if File.exist?(nvim_init_file_path)
  puts "Skip creating nvim init file path #{nvim_init_file_path}"
else
  puts "Creating Nvim init file at #{nvim_init_file_path}"
  File.symlink(nvim_init_file_original_path, nvim_init_file_path)
end

coc_settings_original_path = File.join(Dir.home, '.vim/coc-settings.json')
coc_settings_destination_path = File.join(nvim_dir_path, 'coc-settings.json')

if File.exist?(coc_settings_destination_path)
  puts "Skip creating coc config file path #{coc_settings_destination_path}"
else
  puts "Creating coc config file path #{coc_settings_destination_path}"
  File.symlink(coc_settings_original_path, coc_settings_destination_path)
end

puts 'NVim configuration finished.'
